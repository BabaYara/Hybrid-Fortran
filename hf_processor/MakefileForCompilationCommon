# Copyright (C) 2014 Michel Müller, Tokyo Institute of Technology

# This file is part of Hybrid Fortran.

# Hybrid Fortran is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Hybrid Fortran is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with Hybrid Fortran. If not, see <http://www.gnu.org/licenses/>.

#***************************************************************************#
#  Makefile that gets copied into the individual build directories.         #
#  Usually nothing needs to be changed here.                                #
#                                                                           #
#  Date             2013/02/01                                              #
#  Author           Michel Müller (RIKEN)                                   #
#***************************************************************************#
include ./MakesettingsGeneral
HYBRID_LIBRARY_FILENAME_POSTFIX?=pp
include ./Makesettings

ifdef VERBOSE
DEBUG_OUTPUT=&1
else
DEBUG_OUTPUT=/dev/null
endif

PFLAGS=
ifdef GPU_BUILD
PFLAGS= -DGPU
endif

SRC_FORT=$(wildcard ./*.f90)
SRC_PP=$(wildcard ./*.F90)
SRC_FORT_FIXED=$(wildcard ./*.f)
SRC_PP=$(wildcard ./*.F90)
SRC_PP_FIXED=$(wildcard ./*.F)
SRC=${SRC_FORT} ${SRC_PP} ${SRC_FORT_FIXED} ${SRC_PP_FIXED}

EXECUTABLES_POST=$(subst ",,${EXECUTABLES})
EXECUTABLES_OUT=$(patsubst %,%.out,${EXECUTABLES_POST})
EXECUTABLES_O=$(patsubst %,%.o,${EXECUTABLES_POST})

OBJ_PRE1=$(SRC:.f90=.o)
OBJ_PRE2=$(OBJ_PRE1:.F90=.o)
OBJ_PRE3=$(OBJ_PRE2:.f=.o)
OBJ_PRE4=$(OBJ_PRE3:.F=.o)
OBJ_PRE5=$(patsubst ./%,%,${OBJ_PRE4})
OBJ=$(filter-out $(EXECUTABLES_O),$(OBJ_PRE5))

USER_LIB=lib${HYBRID_LIBRARY_FILENAME_POSTFIX}.a

.SUFFIXES : .out .o .il .F90 .f90 .F .f

VPATH=$OBJDIR

all: ${EXECUTABLES_OUT} ${USER_LIB}

%.out: %.o
	@echo .........linking $< in $(CURDIR)
	@echo ..calling $(LD) -o ../$@ $< $(LDFLAGS) -L./ >${DEBUG_OUTPUT}
	@$(LD) -o ../$@ $< $(LDFLAGS) -L./ >${DEBUG_OUTPUT}

${USER_LIB}: $(OBJ)
	@echo .........building user library ${USER_LIB} from $(OBJ)
	@echo ..calling $(AR) $(ARFLAGS) $@ $(OBJ) >${DEBUG_OUTPUT}
	@$(AR) $(ARFLAGS) $@ $(OBJ)

# we first preprocess with pgcc so we get concatenation / stringification.
# since this only works with files that don't have the F90 prefix, we need to rename first.
%.o: %.F90
	@echo ..........compiling $< in $(CURDIR)
	@echo ..calling "cp $< temp.P90 && pgcc -E $(PFLAGS) temp.P90 | tr "\`" '\n' > temp_$< && rm temp.P90 && $(FC) $(FFLAGS) $(PFLAGS) -c temp_$< -o $@" >${DEBUG_OUTPUT}
	@cp $< temp.P90 && pgcc -E $(PFLAGS) temp.P90 | tr "\`" '\n' > temp_$< && rm temp.P90 && $(FC) $(FFLAGS) $(PFLAGS) -c temp_$< -o $@

%.o: %.f90
	@echo ..........compiling $< in $(CURDIR)
	@echo ..calling $(FC) $(FFLAGS) $(PFLAGS) -c $< -o $@ >${DEBUG_OUTPUT}
	@$(FC) $(FFLAGS) $(PFLAGS) -c $< -o $@

%.o: %.F
	@echo ..........compiling $< in $(CURDIR)
	@echo ..calling $(FC) $(FFLAGS) $(PFLAGS) -c $< -o $@ >${DEBUG_OUTPUT}
	@$(FC) $(FFLAGS) $(PFLAGS) -c $< -o $@

%.o: %.f
	@echo ..........compiling $< in $(CURDIR)
	@echo ..calling $(FC) $(FFLAGS) $(PFLAGS) -c $< -o $@ >${DEBUG_OUTPUT}
	@$(FC) $(FFLAGS) $(PFLAGS) -c $< -o $@

helper_functions.o: storage_order.F90
helper_functions_gpu.o: storage_order.F90
time_profiling.o: helper_functions.o

ifdef AUTO_DEPENDENCY_GENERATOR_OUTPUT_PATH
include ../${AUTO_DEPENDENCY_GENERATOR_OUTPUT_PATH}
endif
