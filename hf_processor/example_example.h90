! Copyright (C) 2013 Michel MÃ¼ller, Rikagaku Kenkyuujo (RIKEN)

! This file is part of Hybrid Fortran.

! Hybrid Fortran is free software: you can redistribute it and/or modify
! it under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.

! Hybrid Fortran is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
! GNU Lesser General Public License for more details.

! You should have received a copy of the GNU Lesser General Public License
! along with Hybrid Fortran. If not, see <http://www.gnu.org/licenses/>.

module example
contains
  subroutine wrapper(a, b, c, d)
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NZ), intent(out) :: c, d

    @domainDependant{domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    a, b, c, d
    @end domainDependant

    @parallelRegion{appliesTo(CPU), domName(x,y), domSize(NX, NY)}
    call add(a, b, c)
    call mult(a, b, d)
    @end parallelRegion
  end subroutine

  subroutine add(a, b, c)
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NZ), intent(out) :: c
    integer :: z

    @domainDependant{domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    a, b, c
    @end domainDependant

    @parallelRegion{appliesTo(GPU), domName(x,y), domSize(NX, NY)}
    do z=1,NZ
      c(z) = a(z) + b(z)
    end do
    @end parallelRegion
  end subroutine

  subroutine mult(a, b, d)
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NZ), intent(out) :: d
    integer :: z

    @domainDependant{domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    a, b, d
    @end domainDependant

    @parallelRegion{appliesTo(GPU), domName(x,y), domSize(NX, NY)}
    do z=1,NZ
      d(z) = a(z) * b(z)
    end do
    @end parallelRegion
  end subroutine

end module example

program main
  use example
  real, dimension(DOM(NX, NY, NZ)) :: a, b, c, d
  integer :: x, y, z
  logical test

  a(:,:,:) = 1.0d0
  b(:,:,:) = 2.0d0
  c(:,:,:) = 0.0d0
  d(:,:,:) = 0.0d0
  test = .TRUE.

  call wrapper(a, b, c, d)
  write(6,*) "calculation complete"

  do y=1,NY
  do x=1,NX
  do z=1,NZ
    if (c(AT(x,y,z)) .NE. 3.0d0) then
      test = .FALSE.
    end if
    if (d(AT(x,y,z)) .NE. 2.0d0) then
      test = .FALSE.
    end if
  end do
  end do
  end do
  if (test .EQ. .TRUE.) then
    write(6,*) "test ok"
  else
    write(6,*) "test failed"
  end if

  stop
end program main