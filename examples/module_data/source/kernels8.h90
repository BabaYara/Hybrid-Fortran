! Copyright (C) 2016 Michel MÃ¼ller, Tokyo Institute of Technology

! This file is part of Hybrid Fortran.

! Hybrid Fortran is free software: you can redistribute it and/or modify
! it under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.

! Hybrid Fortran is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
! GNU Lesser General Public License for more details.

! You should have received a copy of the GNU Lesser General Public License
! along with Hybrid Fortran. If not, see <http://www.gnu.org/licenses/>.'

module kernels8
contains

  subroutine wrapper8()
    use my_module, only: a_dyn, b_dyn, c_dyn, d_dyn
    implicit none

    @domainDependant{attribute(autoDom,present)}
    a_dyn, b_dyn, c_dyn, d_dyn
    @end domainDependant

    call add8(a_dyn, b_dyn, c_dyn)
    call mult8(a_dyn, b_dyn, d_dyn)
  end subroutine

  subroutine add8(a,b,c)
    use my_module, only: nx, ny, nz
    implicit none
    real, dimension(nx, ny, nz), intent(in) :: a, b
    real, dimension(nx, ny, nz), intent(out) :: c
    integer :: z

    @domainDependant{attribute(autoDom, present)}
    a, b, c
    @end domainDependant

    @parallelRegion{domName(x,y), domSize(nx,ny)}
    do z=1,NZ
      call device_routine_add(a(z), b(z), c(z))
    end do
    @end parallelRegion
  end subroutine

  subroutine mult8(a,b,d)
    use my_module, only: nx, ny, nz
    implicit none
    real, dimension(nx, ny, nz), intent(in) :: a, b
    real, dimension(nx, ny, nz), intent(out) :: d
    integer :: z

    @domainDependant{attribute(autoDom, present)}
    a, b, d
    @end domainDependant

    @parallelRegion{domName(x,y), domSize(nx,ny)}
    do z=1,NZ
      call device_routine_mult(a(z), b(z), d(z))
    end do
    @end parallelRegion
  end subroutine

  subroutine device_routine_mult(a,b,result)
    implicit none
    real, intent(in) :: a, b
    real, intent(out) :: result

    result = a * b + 1.0d0
  end subroutine

  subroutine device_routine_add(a,b,result)
    implicit none
    real, intent(in) :: a, b
    real, intent(out) :: result

    @domainDependant{domName(x,y), domSize(nx,ny), attribute(autoDom, present)}
    a, b, result
    @end domainDependant

    result = a * b + 1.0d0
  end subroutine

end module kernels8
