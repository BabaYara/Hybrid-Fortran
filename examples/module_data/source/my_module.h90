! Copyright (C) 2016 Michel MÃ¼ller, Tokyo Institute of Technology

! This file is part of Hybrid Fortran.

! Hybrid Fortran is free software: you can redistribute it and/or modify
! it under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.

! Hybrid Fortran is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
! GNU Lesser General Public License for more details.

! You should have received a copy of the GNU Lesser General Public License
! along with Hybrid Fortran. If not, see <http://www.gnu.org/licenses/>.'

module my_module
	use more_indirection_module, only: indirection

	integer(4), parameter:: rlength = 4
	real(rlength), dimension(:, :, :), allocatable :: a, b, c, d, a2, b2, c2, d2, used_in_acc_routine
	real, dimension(:, :, :), allocatable :: a_dyn, b_dyn, c_dyn, d_dyn
	real, allocatable :: implicitDataArray1(:)
	real, parameter :: some_const = 1.0d0
	integer :: more_indirection = indirection
	integer(4) :: nx, ny, nz

	@domainDependant{attribute(host), domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
	a, b, c, d, a2, b2, c2, d2, used_in_acc_routine
	@end domainDependant

	@domainDependant{attribute(host), domName(x,y,z), domSize(nx,ny,nz), domPP(DOM), accPP(AT)}
	a_dyn, b_dyn, c_dyn, d_dyn
	@end domainDependant

	@domainDependant{attribute(host), domName(z), domSize(NZ)}
	implicitDataArray1
	@end domainDependant
contains
	subroutine cpu_add()
		implicit none
		integer :: x, y, z

		@domainDependant{attribute(host, autoDom), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
		a, b, c
		@end domainDependant

		@domainDependant{attribute(host, autoDom), domName(myDom), domSize(NZ)}
		implicitDataArray1
		@end domainDependant

		do y=1,NY
		do x=1,NX
		do z=1,NZ
		  c(z, x, y) = a(z, x, y) + b(z, x, y)
		end do
		end do
		end do

		allocate(implicitDataArray1(NZ))
		do z=1,NZ
			implicitDataArray1(z) = 1.0d0
		end do
	end subroutine

	subroutine kernel()
		implicit none
		integer :: z

		@domainDependant{attribute(present, autoDom)}
		c
		@end domainDependant

		@domainDependant{attribute(present, autoDom), domName(myDom), domSize(NZ)}
		implicitDataArray1
		@end domainDependant

		@parallelRegion{domName(x,y), domSize(NX, NY)}
		do z=1,NZ
		  c(z) = implicitDataArray1(z)
		end do
		@end parallelRegion
	end subroutine

	subroutine assert_values(test_array, expected_value)
		implicit none
		real, dimension(NX, NY, NZ), intent(in) :: test_array
		real(8), intent(in) :: expected_value
		integer :: fail_x, fail_y, fail_z
		integer :: x, y, z
		logical test

		@domainDependant{attribute(host), domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
		test_array
		@end domainDependant

		test = .TRUE.
		do y=1,NY
		do x=1,NX
		do z=1,NZ
		  if (test .EQ. .TRUE. .AND. test_array(x,y,z) .NE. expected_value) then
			test = .FALSE.
			fail_x = x
			fail_y = y
			fail_z = z
		  end if
		end do
		end do
		end do
		if (test .EQ. .TRUE.) then
		  write(0,*) "test ok"
		else
		  write(0,*) "test failed"
		  write(0,*) "fails at", fail_x, fail_y, fail_z, "test_array:", test_array(fail_x,fail_y,fail_z)
		  stop 2
		end if
	end subroutine
end module