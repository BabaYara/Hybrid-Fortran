! Copyright (C) 2016 Michel MÃ¼ller, Tokyo Institute of Technology

! This file is part of Hybrid Fortran.

! Hybrid Fortran is free software: you can redistribute it and/or modify
! it under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.

! Hybrid Fortran is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
! GNU Lesser General Public License for more details.

! You should have received a copy of the GNU Lesser General Public License
! along with Hybrid Fortran. If not, see <http://www.gnu.org/licenses/>.'

module my_module
	use more_indirection_module, only: indirection
	implicit none
	private

	public:: assert_values
	public:: cpu_add
	public:: kernel
	public:: setup
	public:: cleanup

	integer(4), public, parameter:: rlength = 4

	type my_type
	  real(rlength), pointer:: r(:, :, :)
	end type

	@if{architecture(GPU)}
	type my_type_hfdev
	  real(rlength), device, pointer:: r(:, :, :)
	end type
	@end if

	type pointer_in_name
	  real(rlength), pointer:: r(:, :, :)
	end type

	@if{architecture(GPU)}
	type pointer_in_name_hfdev
	  real(rlength), device, pointer:: r(:, :, :)
	end type
	@end if

	type(my_type), save, private, allocatable:: derived_type_tester(:) !just testing whether save and private attributes work here
	type(pointer_in_name), save, private:: derived_type_tester2(1) !static allocated, uses "pointer" in the declaration prefix without being a pointer

	real(rlength), public, dimension(:, :, :), allocatable :: a, b, c, d, a2, b2, c2, d2, used_in_acc_routine
	real, public, dimension(:, :, :), allocatable :: a_dyn, b_dyn, c_dyn, d_dyn
	real, public, dimension(:), allocatable :: host_only_array
	real, public, allocatable :: implicitDataArray1(:)
	real, public, parameter :: some_const = 1.0d0
	integer, public :: more_indirection = indirection
	integer(4), public :: nx, ny, nz
	integer(4), public :: overspecified_const
	real, public :: to_be_expanded_variable

	@if{architecture(GPU)}
	real, public, device, allocatable, dimension(:,:) :: to_be_expanded_variable_hfdev
	@end if

	@domainDependant{attribute(autoDom, host), domName(x,y), domSize(NX,NY)}
	to_be_expanded_variable
	@end domainDependant

	@domainDependant{attribute(host)}
	overspecified_const
	@end domainDependant

	@domainDependant{attribute(host), domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
	a, b, c, d, a2, b2, c2, d2, used_in_acc_routine
	@end domainDependant

	@domainDependant{attribute(host), domName(it1), domSize(1)}
	derived_type_tester, derived_type_tester2
	@end domainDependant

	@domainDependant{attribute(host), domName(x,y,z), domSize(nx,ny,nz), domPP(DOM), accPP(AT)}
	a_dyn, b_dyn, c_dyn, d_dyn
	@end domainDependant

	@domainDependant{attribute(host), domName(z), domSize(NZ)}
	implicitDataArray1
	@end domainDependant
contains
	subroutine setup(nx_in, ny_in, nz_in)
		implicit none
		integer(4), intent(in) :: nx_in, ny_in, nz_in

		@domainDependant{attribute(host, autoDom)}
		host_only_array
		@end domainDependant

		overspecified_const = 0.0d0

		nx = nx_in
		ny = ny_in
		nz = nz_in

		allocate(a_dyn(nx,ny,nz))
		allocate(b_dyn(nx,ny,nz))
		allocate(c_dyn(nx,ny,nz))
		allocate(d_dyn(nx,ny,nz))
		allocate(host_only_array(3))

		@if{architecture(GPU)}
		allocate(to_be_expanded_variable_hfdev(nx,ny))
		@end if

		allocate(derived_type_tester(1))
		nullify(derived_type_tester(1)%r)

		@if{architecture(GPU)}
		allocate(derived_type_tester_hfdev(1))
		nullify(derived_type_tester_hfdev(1)%r)
		@end if

		nullify(derived_type_tester2(1)%r)
		@if{architecture(GPU)}
		nullify(derived_type_tester2_hfdev(1)%r)
		@end if

		host_only_array(:) = 0.0d0
		host_only_array(2) = 1.0d0
	end subroutine

	subroutine non_parallel_device_routine()
		implicit none

		@domainDependant{attribute(present, autoDom)}
		derived_type_tester
		@end domainDependant

		allocate(derived_type_tester(1))
	end subroutine

	subroutine cleanup()
		implicit none
		deallocate(a_dyn)
		deallocate(b_dyn)
		deallocate(c_dyn)
		deallocate(d_dyn)
	end subroutine

	subroutine cpu_add(a)
		implicit none
		real(rlength), intent(in), target :: a(NZ, NX, NY)
		integer :: x, y, z

		@domainDependant{attribute(host, autoDom), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
		a, b, c
		@end domainDependant

		@domainDependant{attribute(host, autoDom), domName(myDom), domSize(NZ)}
		implicitDataArray1
		@end domainDependant

		@domainDependant{attribute(host, autoDom)}
		derived_type_tester
		@end domainDependant

		@domainDependant{attribute(host), domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
		derived_type_tester(1)%r
		@end domainDependant

		derived_type_tester(1)%r => a

		do y=1,NY
		do x=1,NX
		do z=1,NZ
		  c(z, x, y) = derived_type_tester(1)%r(z, x, y) + b(z, x, y)
		end do
		end do
		end do

		allocate(implicitDataArray1(NZ))
		do z=1,NZ
			implicitDataArray1(z) = real(z)
		end do
	end subroutine

	!this kernel is never called, but we use it to test for a bug where the symbol state of a and b gets set to device present even in kernel() where it's supposed to be host
	subroutine dummy_kernel()
		implicit none
		real :: dummy_value

		@domainDependant{attribute(present, autoDom)}
		a, b
		@end domainDependant

		@parallelRegion{domName(x,y), domSize(NX, NY)}
		dummy_value = a(1) + b(1)
		@end parallelRegion
	end subroutine

	subroutine kernel(c)
		implicit none
		real(rlength), intent(out), target :: c(nx, ny, nz)
		integer :: z
		real :: pre_computed_factor

		@domainDependant{attribute(host, autoDom), domPP(DOM), accPP(AT)}
		a, b
		@end domainDependant

		@domainDependant{attribute(present, autoDom), domPP(DOM), accPP(AT)}
		c
		@end domainDependant

		@domainDependant{attribute(present, autoDom)}
		derived_type_tester
		@end domainDependant

		@domainDependant{attribute(present), domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
		derived_type_tester(1)%r
		@end domainDependant

		@domainDependant{attribute(present, autoDom), domName(myDom), domSize(NZ)}
		implicitDataArray1
		@end domainDependant

		deallocate(derived_type_tester)
		call non_parallel_device_routine()

		derived_type_tester(1)%r => c

		!test whether HF can handle using the host version of an array in the same subroutine as a kernel resides using device data
		pre_computed_factor = a(1,1,1) + b(1,1,1)

		@parallelRegion{domName(x,y), domSize(NX, NY)}
		do z=1,nz
		  derived_type_tester(1)%r(x,y,z) = implicitDataArray1(z) + overspecified_const + pre_computed_factor
		end do
		@end parallelRegion
	end subroutine

	subroutine assert_values(test_array, expected_value)
		implicit none
		real, dimension(NX, NY, NZ), intent(in) :: test_array
		real(8), intent(in) :: expected_value
		integer :: fail_x, fail_y, fail_z
		integer :: x, y, z
		logical test

		@domainDependant{attribute(host), domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
		test_array
		@end domainDependant

		test = .TRUE.
		do y=1,NY
		do x=1,NX
		do z=1,NZ
			if (test .EQ. .TRUE. .AND. test_array(x,y,z) .NE. expected_value) then
				test = .FALSE.
				fail_x = x
				fail_y = y
				fail_z = z
			end if
		end do
		end do
		end do
		if (test .EQ. .TRUE.) then
			write(0,*) "test ok"
		else
			write(0,*) "test failed"
			write(0,*) "fails at", fail_x, fail_y, fail_z, "test_array:", test_array(fail_x,fail_y,fail_z)
			stop 2
		end if
	end subroutine
end module