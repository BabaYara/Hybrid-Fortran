! Copyright (C) 2016 Michel MÃ¼ller, Tokyo Institute of Technology

! This file is part of Hybrid Fortran.

! Hybrid Fortran is free software: you can redistribute it and/or modify
! it under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.

! Hybrid Fortran is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
! GNU Lesser General Public License for more details.

! You should have received a copy of the GNU Lesser General Public License
! along with Hybrid Fortran. If not, see <http://www.gnu.org/licenses/>.'

module example
contains
  subroutine data_region_wrapper()
    use kernels, only: wrapper
    use my_module, only: a, b, c, d
    implicit none

    @domainDependant{attribute(autoDom,transferHere)}
    a, b, c, d
    @end domainDependant

    call wrapper()
  end subroutine

  subroutine data_region_wrapper2()
    use kernels2, only: wrapper2
    use my_module, only: a, b, c, d, a2, b2, c2, d2
    implicit none

    @domainDependant{attribute(autoDom,transferHere)}
    a, b, c, d, a2, b2, c2, d2
    @end domainDependant

    call wrapper2()
  end subroutine

  subroutine data_region_wrapper4()
    use kernels4, only: wrapper4
    use my_module, only: a, b, c, d
    implicit none

    @domainDependant{attribute(autoDom,transferHere)}
    a, b, c, d
    @end domainDependant

    call wrapper4()
  end subroutine

  subroutine data_region_wrapper5()
    use kernels5, only: wrapper5, used_in_acc_routine
    use my_module, only: a, b, c, d
    implicit none

    @domainDependant{attribute(autoDom,transferHere)}
    a, b, c, d, used_in_acc_routine
    @end domainDependant

    call wrapper5()
  end subroutine

!   subroutine data_region_wrapper6()
!     use kernels6, only: wrapper6
!     use my_module, only: a, b, c
!     implicit none

!     @domainDependant{attribute(autoDom,transferHere)}
!     a, b, c
!     @end domainDependant

!     call wrapper6()
!   end subroutine

  subroutine assert_values(test_array, expected_value)
    implicit none
    real, dimension(NX, NY, NZ), intent(in) :: test_array
    real(8), intent(in) :: expected_value
    integer :: fail_x, fail_y, fail_z
    integer :: x, y, z
    logical test

    @domainDependant{attribute(host), domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    test_array
    @end domainDependant

    test = .TRUE.
    do y=1,NY
    do x=1,NX
    do z=1,NZ
      if (test .EQ. .TRUE. .AND. test_array(x,y,z) .NE. expected_value) then
        test = .FALSE.
        fail_x = x
        fail_y = y
        fail_z = z
      end if
    end do
    end do
    end do
    if (test .EQ. .TRUE.) then
      write(0,*) "test ok"
    else
      write(0,*) "test failed"
      write(0,*) "fails at", fail_x, fail_y, fail_z, "test_array:", test_array(fail_x,fail_y,fail_z)
      stop 2
    end if
  end subroutine

end module example

program main
  use example, only: data_region_wrapper, data_region_wrapper2, data_region_wrapper4, data_region_wrapper5, assert_values
  use my_module, only: a, b, a2, b2, c, d, c2, d2, used_in_acc_routine
  use kernels3, only: outer_wrapper3
  use kernels5, only: kernels5_initialize, kernels5_cleanup
!   use kernels6, only: kernels6_initialize, kernels6_cleanup
  implicit none
  integer :: x, y, z
  integer :: fail_x, fail_y, fail_z
  logical test
  real :: fail_val

  allocate(a(DOM(NX,NY,NZ)))
  allocate(b(DOM(NX,NY,NZ)))
  allocate(a2(DOM(NX,NY,NZ)))
  allocate(b2(DOM(NX,NY,NZ)))
  allocate(c(DOM(NX,NY,NZ)))
  allocate(d(DOM(NX,NY,NZ)))
  allocate(c2(DOM(NX,NY,NZ)))
  allocate(d2(DOM(NX,NY,NZ)))

  a(:,:,:) = 1.0d0
  b(:,:,:) = 2.0d0
  c(:,:,:) = 0.0d0
  d(:,:,:) = 0.0d0
  test = .TRUE.

  call data_region_wrapper()
  write(0,*) "calculation1 complete"
  call assert_values(c, 3.0d0)
  call assert_values(d, 2.0d0)

  a(:,:,:) = 1.0d0
  b(:,:,:) = 2.0d0
  a2(:,:,:) = 1.0d0
  b2(:,:,:) = 2.0d0
  c(:,:,:) = 0.0d0
  d(:,:,:) = 0.0d0
  c2(:,:,:) = 0.0d0
  d2(:,:,:) = 0.0d0
  call data_region_wrapper2()
  write(0,*) "calculation2 complete"
  call assert_values(c, 3.0d0)
  call assert_values(d, 2.0d0)
  call assert_values(c2, 3.0d0)
  call assert_values(d2, 2.0d0)

  c(:,:,:) = 0.0d0
  d(:,:,:) = 0.0d0

  call outer_wrapper3()
  write(0,*) "calculation3 complete"
  call assert_values(c, 8.0d0)
  call assert_values(d, 2.0d0)

  c(:,:,:) = 0.0d0
  d(:,:,:) = 0.0d0
  call data_region_wrapper4()
  write(0,*) "calculation4 complete"
  call assert_values(c, 8.0d0)
  call assert_values(d, 2.0d0)

  c(:,:,:) = 0.0d0
  d(:,:,:) = 0.0d0
  call kernels5_initialize()
  call data_region_wrapper5()
  call kernels5_cleanup()
  write(0,*) "calculation5 complete"
  call assert_values(c, 8.0d0)
  call assert_values(d, 2.0d0)

  !MMU 2015-3-26: As of now device routines that are not scalar do not work reliably.
  !Note: Using !$acc routine is not yet compatible with module data imports as of PGI 15.3
!   c(:,:,:) = 0.0d0
!   d(:,:,:) = 0.0d0
!   allocate(used_in_acc_routine(DOM(NX,NY,NZ)))
!   used_in_acc_routine(:,:,:) = 1.0d0
!   call kernels6_initialize()
!   call data_region_wrapper6()
!   call kernels6_cleanup()
!   write(0,*) "calculation6 complete"
!   call assert_values(c, 10.0d0)
!   deallocate(used_in_acc_routine)

  deallocate(a)
  deallocate(b)
  deallocate(c)
  deallocate(d)

  stop
end program main