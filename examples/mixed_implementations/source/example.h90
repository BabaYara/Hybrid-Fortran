! Copyright (C) 2014 Michel MÃ¼ller, Tokyo Institute of Technology

! This file is part of Hybrid Fortran.

! Hybrid Fortran is free software: you can redistribute it and/or modify
! it under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.

! Hybrid Fortran is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
! GNU Lesser General Public License for more details.

! You should have received a copy of the GNU Lesser General Public License
! along with Hybrid Fortran. If not, see <http://www.gnu.org/licenses/>.

module example
contains

  subroutine test_data_region()
    implicit none
    real, dimension(NZ) :: a, b, c, d

    @domainDependant{domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    a, b, c, d
    @end domainDependant

    a(:,:,:) = 1.0d0
    b(:,:,:) = 2.0d0

    c(:,:,:) = 0.0d0
    d(:,:,:) = 0.0d0
    call wrapper_second_level(a, b, c, d, .false.)
    call assert_values(c, 3.0d0)
    call assert_values(d, 2.0d0)

    c(:,:,:) = 0.0d0
    d(:,:,:) = 0.0d0
    call wrapper_second_level(a, b, c, d, .true.)
    call assert_values(c, 3.0d0)
    call assert_values(d, 2.0d0)

  end subroutine

  subroutine assert_values(test_array, expected_value)
    implicit none
    real, dimension(DOM(NX, NY, NZ)), intent(in) :: test_array
    real(8), intent(in) :: expected_value
    integer :: fail_x, fail_y, fail_z
    integer :: x, y, z
    logical test

    test = .TRUE.
    do y=1,NY
    do x=1,NX
    do z=1,NZ
      if (test .EQ. .TRUE. .AND. test_array(AT(x,y,z)) .NE. expected_value) then
        test = .FALSE.
        fail_x = x
        fail_y = y
        fail_z = z
      end if
    end do
    end do
    end do
    if (test .EQ. .TRUE.) then
      write(6,*) "test ok"
    else
      write(6,*) "test failed"
      write(6,*) "fails at", fail_x, fail_y, fail_z, "test_array:", test_array(AT(fail_x,fail_y,fail_z))
      stop 2
    end if
  end subroutine

  subroutine wrapper_second_level(a, b, c, d, use_inline_kernels)
    implicit none
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NZ), intent(out) :: c, d
    logical, intent(in) :: use_inline_kernels

    @domainDependant{domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    a, b, c, d
    @end domainDependant

    if (use_inline_kernels) then
      call wrapper_inline_kernels(a, b, c, d)
    else
      call wrapper_separate_kernels(a, b, c, d)
    end if

  end subroutine

  !using the @scheme directive and defining the implementation in MakesettingsGeneral, as shown in this example, we can override the default implementation and mix different ones,
  !for example mixing OpenACC and CUDA Fortran. Note that the template can span over multiple parts of your file, such as multiple subroutines or even modules.
  !please note: device data in the OpenACC implementation is currently *not* compatible with device data in CUDA Fortran implementation, so we can *not* do a 'transferHere' in wrapper_second_level already.
  @scheme{name(SEPARATE_KERNELS)}
  subroutine wrapper_separate_kernels(a, b, c, d)
    implicit none
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NZ), intent(out) :: c, d

    @domainDependant{domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    a, b, c, d
    @end domainDependant

    @parallelRegion{appliesTo(CPU), domName(x,y), domSize(NX, NY)}
    call add(a, b, c)
    call mult(a, b, d)
    @end parallelRegion
  end subroutine

  subroutine add(a, b, c)
    implicit none
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NZ), intent(out) :: c
    integer :: z

    @domainDependant{domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    a, b, c
    @end domainDependant

    @parallelRegion{appliesTo(GPU), domName(x,y), domSize(NX, NY)}
    do z=1,NZ
      c(z) = a(z) + b(z)
    end do
    @end parallelRegion
  end subroutine

  subroutine mult(a, b, d)
    implicit none
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NZ), intent(out) :: d
    integer :: z

    @domainDependant{domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    a, b, d
    @end domainDependant

    @parallelRegion{appliesTo(GPU), domName(x,y), domSize(NX, NY)}
    do z=1,NZ
      d(z) = a(z) * b(z)
    end do
    @end parallelRegion
  end subroutine
  @end scheme

  @scheme{name(INLINE_KERNELS)}
  subroutine wrapper_inline_kernels(a, b, c, d)
    implicit none
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NZ), intent(out) :: c, d

    @domainDependant{domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    a, b, c, d
    @end domainDependant

    @parallelRegion{appliesTo(CPU), domName(x,y), domSize(NX, NY)}
    call inline_kernels(a, b, c, d)
    @end parallelRegion
  end subroutine

  ! ############################################
  ! With the OpenACC backend we can also combine
  ! multiple kernels in one subroutine, so it is
  ! not absolutely necessary to separate them like
  ! in the first example
  ! ############################################
  subroutine inline_kernels(a, b, c, d)
    implicit none
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NZ), intent(out) :: c, d
    integer :: z

    @domainDependant{domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    a, b, c, d
    @end domainDependant

    @parallelRegion{appliesTo(GPU), domName(x,y), domSize(NX, NY)}
    do z=1,NZ
      c(z) = a(z) + b(z)
    end do
    @end parallelRegion

    @parallelRegion{appliesTo(GPU), domName(x,y), domSize(NX, NY)}
    do z=1,NZ
      d(z) = a(z) * b(z)
    end do
    @end parallelRegion
  end subroutine
  @end scheme
end module example

program main
  use example
  implicit none

  call test_data_region()

  stop
end program main