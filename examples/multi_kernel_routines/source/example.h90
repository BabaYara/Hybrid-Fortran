! Copyright (C) 2016 Michel MÃ¼ller, Tokyo Institute of Technology

! This file is part of Hybrid Fortran.

! Hybrid Fortran is free software: you can redistribute it and/or modify
! it under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.

! Hybrid Fortran is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
! GNU Lesser General Public License for more details.

! You should have received a copy of the GNU Lesser General Public License
! along with Hybrid Fortran. If not, see <http://www.gnu.org/licenses/>.

module example
implicit none
contains
  subroutine wrapper_separate_kernels(a, b, c, d)
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NZ), intent(out) :: c, d

    @domainDependant{attribute(transferHere), domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    a, b, c, d
    @end domainDependant

    @parallelRegion{appliesTo(CPU), domName(x,y), domSize(NX, NY)}
    call add(a, b, c)
    call mult(a, b, d)
    @end parallelRegion
  end subroutine

  subroutine add(a, b, c)
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NZ), intent(out) :: c
    integer :: z

    @domainDependant{attribute(present), domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    a, b, c
    @end domainDependant

    @parallelRegion{appliesTo(GPU), domName(x,y), domSize(NX, NY)}
    do z=1,NZ
      c(z) = a(z) + b(z)
    end do
    @end parallelRegion
  end subroutine

  subroutine mult(a, b, d)
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NZ), intent(out) :: d
    integer :: z

    @domainDependant{attribute(present), domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    a, b, d
    @end domainDependant

    @parallelRegion{appliesTo(GPU), domName(x,y), domSize(NX, NY)}
    do z=1,NZ
      d(z) = a(z) + b(z)
    end do
    @end parallelRegion
  end subroutine

  subroutine wrapper_inline_kernels(a, b, c, d)
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NZ), intent(out) :: c, d

    @domainDependant{attribute(transferHere), domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    a, b, c, d
    @end domainDependant

    @parallelRegion{appliesTo(CPU), domName(x,y), domSize(NX, NY)}
    call inline_kernels(a, b, c, d)
    @end parallelRegion
  end subroutine

  subroutine inline_kernels(a, b, c, d)
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NZ), intent(out) :: c, d
    integer :: z, z_end
    real, parameter :: my_parameter = 1.0d0
    real :: temp
    real :: temp2(NZ)

    @domainDependant{attribute(present), domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    a, b, c, d, temp2
    @end domainDependant

    z_end = NZ

    @parallelRegion{appliesTo(GPU), domName(x,y), domSize(NX, NY)}
    do z=1,z_end
      temp = a(z) + b(z)
      temp2(z) = b(z)
      c(z) = temp + my_parameter
    end do
    @end parallelRegion

    @parallelRegion{appliesTo(GPU), domName(x,y), domSize(NX, NY)}
    do z=1,NZ
      d(z) = a(z) + temp2(z)
    end do
    @end parallelRegion
  end subroutine

  subroutine wrapper_mixed_kernels(a, b, c, d)
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NZ), intent(out) :: c, d

    integer :: x, y

    @domainDependant{attribute(transferHere), domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    a, b, c, d
    @end domainDependant

    @parallelRegion{appliesTo(CPU), domName(x,y), domSize(NX, NY)}
    call mixed_kernels(x, y, a, b, c(:,:,:), d(:,:,:))
    @end parallelRegion
  end subroutine

  subroutine mixed_kernels(x, y, a, b, c, d)
    integer :: x, y
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NX,NY,NZ), intent(out) :: c, d
    integer :: z

    @domainDependant{attribute(autoDom,present), domName(x,y), domSize(NX,NY)}
    a, b
    @end domainDependant

    !we need to specify domPP / accPP explicitely here because CPU version is inside of || region
    @domainDependant{attribute(present), domPP(DOM), accPP(AT), domName(x,y,z), domSize(NX,NY,NZ)}
    c, d
    @end domainDependant

    @parallelRegion{appliesTo(GPU), domName(x,y), domSize(NX, NY)}
    do z=1,NZ
      c(x,y,z) = a(z) + b(z)
    end do
    @end parallelRegion

    call mult(a, b, d(x,y,:))
  end subroutine

  subroutine tight_inline_kernels(a, b, c, d)
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NZ), intent(out) :: c, d
    integer :: z, z_end
    real, parameter :: my_parameter = 1.0d0
    real :: temp
    real :: temp2(NZ)

    @domainDependant{attribute(transferHere), domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    a, b, c, d
    @end domainDependant

    @domainDependant{attribute(present), domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    temp2
    @end domainDependant

    z_end = NZ

    @parallelRegion{domName(x,y), domSize(NX, NY)}
    do z=1,z_end
      temp = a(z) + b(z)
      temp2(z) = b(z)
      c(z) = temp + my_parameter
    end do
    @end parallelRegion

    @parallelRegion{domName(x,y), domSize(NX, NY)}
    do z=1,NZ
      d(z) = a(z) + temp2(z)
    end do
    @end parallelRegion
  end subroutine

  subroutine tight_inline_kernels2(a, b, c, d)
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NZ), intent(out) :: c, d
    integer :: z, z_end
    real, parameter :: my_parameter = 1.0d0
    real :: temp
    real :: temp2(NZ)

    @domainDependant{attribute(transferHere, autoDom), domName(x,y), domSize(NX,NY), domPP(DOM), accPP(AT)}
    a, b, c, d
    @end domainDependant

    @domainDependant{attribute(present, autoDom), domName(x,y), domSize(NX,NY), domPP(DOM), accPP(AT)}
    temp2
    @end domainDependant

    z_end = NZ

    @parallelRegion{domName(x,y), domSize(NX, NY)}
    do z=1,z_end
      temp = a(z) + b(z)
      temp2(z) = b(z)
      c(z) = temp + my_parameter
    end do
    @end parallelRegion

    @parallelRegion{domName(x,y), domSize(NX, NY)}
    do z=1,NZ
      d(z) = a(z) + temp2(z)
    end do
    @end parallelRegion
  end subroutine

  subroutine assert_values(test_array, expected_value)
    implicit none
    real, dimension(NX, NY, NZ), intent(in) :: test_array
    real(8), intent(in) :: expected_value
    real(8) :: expected_value_fail, curr_expected_value
    integer :: fail_x, fail_y, fail_z
    integer :: x, y, z
    logical test

    @domainDependant{attribute(host), domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    test_array
    @end domainDependant

    test = .TRUE.
    expected_value_fail = 0.0d0
    curr_expected_value = 0.0d0
    do y=1,NY
    do x=1,NX
    do z=1,NZ
      curr_expected_value = expected_value + real(x + y + z)
      if (test .EQ. .TRUE. .AND. test_array(x,y,z) .NE. curr_expected_value) then
        expected_value_fail = curr_expected_value
        test = .FALSE.
        fail_x = x
        fail_y = y
        fail_z = z
      end if
    end do
    end do
    end do
    if (test .EQ. .TRUE.) then
      write(0,*) "test ok"
    else
      write(0,*) "test failed"
      write(0,*) "fails at", fail_x, fail_y, fail_z, "test_array:", test_array(fail_x,fail_y,fail_z)
      write(0,*) "expected:", expected_value_fail
      stop 2
    end if
  end subroutine
end module example

program main
  use example
  real, dimension(DOM(NX, NY, NZ)) :: a, b, c, d
  integer :: x, y, z
  integer :: fail_x, fail_y, fail_z
  logical test

  a(:,:,:) = 1.0d0
  b(:,:,:) = 0.0d0
  c(:,:,:) = 0.0d0
  d(:,:,:) = 0.0d0
  test = .TRUE.

  do y=1,NY
  do x=1,NX
  do z=1,NZ
    b(AT(x,y,z)) = 2.0d0 + real(x + y + z)
  end do
  end do
  end do

  call wrapper_separate_kernels(a, b, c, d)
  write(6,*) "calculation separate complete"
  call assert_values(c, 3.0d0)
  call assert_values(d, 3.0d0)

  c(:,:,:) = 0.0d0
  d(:,:,:) = 0.0d0
  call wrapper_inline_kernels(a, b, c, d)
  write(6,*) "calculation inline complete"
  call assert_values(c, 4.0d0)
  call assert_values(d, 3.0d0)

  c(:,:,:) = 0.0d0
  d(:,:,:) = 0.0d0
  call tight_inline_kernels(a, b, c, d)
  write(6,*) "calculation tight w/ explicit domain dependants complete"
  call assert_values(c, 4.0d0)
  call assert_values(d, 3.0d0)

  c(:,:,:) = 0.0d0
  d(:,:,:) = 0.0d0
  call tight_inline_kernels2(a, b, c, d)
  write(6,*) "calculation tight w/ autoDom domain dependants complete"
  call assert_values(c, 4.0d0)
  call assert_values(d, 3.0d0)

  c(:,:,:) = 0.0d0
  d(:,:,:) = 0.0d0
  call wrapper_mixed_kernels(a, b, c, d)
  write(6,*) "calculation mixed complete"
  call assert_values(c, 3.0d0)
  call assert_values(d, 3.0d0)

  stop
end program main