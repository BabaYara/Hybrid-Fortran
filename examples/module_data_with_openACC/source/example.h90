! Copyright (C) 2014 Michel MÃ¼ller, Tokyo Institute of Technology

! This file is part of Hybrid Fortran.

! Hybrid Fortran is free software: you can redistribute it and/or modify
! it under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.

! Hybrid Fortran is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
! GNU Lesser General Public License for more details.

! You should have received a copy of the GNU Lesser General Public License
! along with Hybrid Fortran. If not, see <http://www.gnu.org/licenses/>.'

module example
contains
  subroutine data_region_wrapper()
    use kernels, only: wrapper
    use my_module, only: a, b, c, d
    implicit none

    @domainDependant{attribute(autoDom,transferHere)}
    a, b, c, d
    @end domainDependant

    call wrapper()
  end subroutine

  subroutine data_region_wrapper2()
    use kernels2, only: wrapper2
    use my_module, only: a, b, c, d
    implicit none

    @domainDependant{attribute(autoDom,transferHere)}
    a, b, c, d
    @end domainDependant

    call wrapper2()
  end subroutine

end module example

program main
  use example, only: data_region_wrapper, data_region_wrapper2
  use my_module, only: a, b, c, d
  use kernels3, only: outer_wrapper3
  implicit none
  integer :: x, y, z
  integer :: fail_x, fail_y, fail_z
  logical test

  allocate(a(DOM(NX,NY,NZ)))
  allocate(b(DOM(NX,NY,NZ)))
  allocate(c(DOM(NX,NY,NZ)))
  allocate(d(DOM(NX,NY,NZ)))

  a(:,:,:) = 1.0d0
  b(:,:,:) = 2.0d0
  c(:,:,:) = 0.0d0
  d(:,:,:) = 0.0d0
  test = .TRUE.

  call data_region_wrapper()
  write(0,*) "calculation1 complete"

  do y=1,NY
  do x=1,NX
  do z=1,NZ
    if (test .EQ. .TRUE. .AND. c(AT(x,y,z)) .NE. 3.0d0) then
      test = .FALSE.
      fail_x = x
      fail_y = y
      fail_z = z
      write(0,*) "FAIL"
    end if
    if (test .EQ. .TRUE. .AND. d(AT(x,y,z)) .NE. 2.0d0) then
      test = .FALSE.
      fail_x = x
      fail_y = y
      fail_z = z
      write(0,*) "FAIL"
    end if
  end do
  end do
  end do

  c(:,:,:) = 0.0d0
  d(:,:,:) = 0.0d0

  call data_region_wrapper2()
  write(0,*) "calculation2 complete"

  do y=1,NY
  do x=1,NX
  do z=1,NZ
    if (test .EQ. .TRUE. .AND. c(AT(x,y,z)) .NE. 3.0d0) then
      test = .FALSE.
      fail_x = x
      fail_y = y
      fail_z = z
      write(0,*) "FAIL"
    end if
    if (test .EQ. .TRUE. .AND. d(AT(x,y,z)) .NE. 2.0d0) then
      test = .FALSE.
      fail_x = x
      fail_y = y
      fail_z = z
      write(0,*) "FAIL"
    end if
  end do
  end do
  end do

  c(:,:,:) = 0.0d0
  d(:,:,:) = 0.0d0

  call outer_wrapper3()
  write(0,*) "calculation3 complete"

  do y=1,NY
  do x=1,NX
  do z=1,NZ
    if (test .EQ. .TRUE. .AND. c(AT(x,y,z)) .NE. 8.0d0) then
      test = .FALSE.
      fail_x = x
      fail_y = y
      fail_z = z
      write(0,*) "FAIL"
    end if
    if (test .EQ. .TRUE. .AND. d(AT(x,y,z)) .NE. 2.0d0) then
      test = .FALSE.
      fail_x = x
      fail_y = y
      fail_z = z
      write(0,*) "FAIL"
    end if
  end do
  end do
  end do

   if (test .EQ. .TRUE.) then
    write(0,*) "test ok"
  else
    write(0,*) "test failed"
    write(0,*) "fails at", fail_x, fail_y, fail_z, "C:", c(AT(fail_x,fail_y,fail_z)), "D:", d(AT(fail_x,fail_y,fail_z))
    stop 2
  end if

  deallocate(a)
  deallocate(b)
  deallocate(c)
  deallocate(d)

  stop
end program main