! Copyright (C) 2014 Michel MÃ¼ller, Tokyo Institute of Technology

! This file is part of Hybrid Fortran.

! Hybrid Fortran is free software: you can redistribute it and/or modify
! it under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.

! Hybrid Fortran is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
! GNU Lesser General Public License for more details.

! You should have received a copy of the GNU Lesser General Public License
! along with Hybrid Fortran. If not, see <http://www.gnu.org/licenses/>.'

module kernels5

    real, dimension(:,:,:), allocatable :: used_in_acc_routine

    @domainDependant{attribute(host), domName(x,y,z), domSize(NX,NY,NZ), domPP(DOM), accPP(AT)}
    used_in_acc_routine
    @end domainDependant

contains
  subroutine kernels5_initialize()
    @domainDependant{}
    @end domainDependant
    allocate(used_in_acc_routine(NX,NY,NZ))
    used_in_acc_routine(:,:,:) = 5.0d0
  end subroutine

  subroutine kernels5_cleanup()
    deallocate(used_in_acc_routine)
  end subroutine

  subroutine wrapper5()
    use my_module, only: a, b, c, d
    implicit none

    @domainDependant{attribute(autoDom,present)}
    a, b, c, d
    @end domainDependant

    call add5(a, b, c)
    call mult5(a, b, d)
  end subroutine

  subroutine add5(a,b,c)
    implicit none
    real, dimension(NX,NY,NZ), intent(in) :: a, b
    real, dimension(NX,NY,NZ), intent(out) :: c
    integer :: z

    @domainDependant{attribute(autoDom)}
    a, b, c
    @end domainDependant

    @parallelRegion{domName(x,y), domSize(NX, NY)}
    do z=1,NZ
      c(z) = a(z) + b(z) + used_in_acc_routine(x,y,z)
    end do
    @end parallelRegion
  end subroutine

  subroutine mult5(a,b,d)
    implicit none
    real, dimension(NX,NY,NZ), intent(in) :: a, b
    real, dimension(NX,NY,NZ), intent(out) :: d
    integer :: z

    @domainDependant{attribute(autoDom)}
    a, b, d
    @end domainDependant

    @parallelRegion{domName(x,y), domSize(NX, NY)}
    do z=1,NZ
      d(z) = a(z) * b(z)
    end do
    @end parallelRegion
  end subroutine

end module kernels5
