module demo
  real, parameter :: my_param = 2.0d0
contains
  subroutine kernel1(a, b, c)
    implicit none
    real, dimension(NX, NY), intent(in) :: a, b
    real, dimension(NX, NY), intent(out) :: c

    @parallelRegion{domName(x,y), domSize(NX, NY)}
    c(x,y) = a(x,y) + b(x,y)
    @end parallelRegion
  end subroutine

  subroutine kernel2(a, b, c)
    implicit none
    real, dimension(NX, NY), intent(in) :: a, b
    real, dimension(NX, NY), intent(out) :: c

    @parallelRegion{domName(x,y), domSize(NX, NY)}
    c(x,y) = a(x,y) + b(x,y) + my_param
    @end parallelRegion
  end subroutine

  subroutine kernel3(a, b, c)
    implicit none
    real, dimension(NX, NY), intent(in) :: a, b
    real, dimension(NX, NY), intent(out) :: c

    @parallelRegion{domName(x,y), domSize(NX, NY)}
    call inner_routine(a(x,y), b(x,y), c(x,y))
    @end parallelRegion
  end subroutine

  subroutine scalar_host_routine()
    implicit none
    real scalartest

    call inner_routine(3.0, 4.0, scalartest)
    if (scalartest == 9.0d0) then
      write(0,*) "scalar test ok"
    else
      write(0,*) "scalar test failed", scalartest
      stop 2
    end if
  end subroutine

  subroutine inner_routine(a, b, c)
    implicit none
    real, intent(in) :: a, b
    real, intent(out) :: c

    c = a + b + my_param
  end subroutine

  subroutine kernel4(a, b, c)
    use secondary, only: my_external_param
    implicit none
    real, dimension(NX, NY), intent(in) :: a, b
    real, dimension(NX, NY), intent(out) :: c

    @parallelRegion{domName(x,y), domSize(NX, NY)}
    c(x,y) = a(x,y) + b(x,y) + my_external_param
    @end parallelRegion
  end subroutine

  subroutine kernel5(a, b, c)
    use secondary, only: my_external_param2
    implicit none
    real, dimension(NX, NY), intent(in) :: a, b
    real, dimension(NX, NY), intent(out) :: c

    @parallelRegion{domName(x,y), domSize(NX, NY)}
    c(x,y) = a(x,y) + b(x,y) + my_external_param2
    @end parallelRegion
  end subroutine

  subroutine kernel6(a, b, c)
    use secondary, only: my_external_array
    implicit none
    real, dimension(NX, NY), intent(in) :: a, b
    real, dimension(NX, NY), intent(out) :: c

    @domainDependant{attribute(autoDom, transferHere)}
    my_external_array
    @end domainDependant

    @parallelRegion{domName(x,y), domSize(NX, NY)}
    c(x,y) = a(x,y) + b(x,y) + my_external_array(2)
    @end parallelRegion
  end subroutine

  subroutine kernel7(a, b, c)
    use secondary, only: my_external_array2
    implicit none
    real, dimension(NX, NY), intent(in) :: a, b
    real, dimension(NX, NY), intent(out) :: c

    @domainDependant{attribute(autoDom, transferHere)}
    my_external_array2
    @end domainDependant

    @parallelRegion{domName(x,y), domSize(NX, NY)}
    c(x,y) = a(x,y) + b(x,y) + my_external_array2(2)
    @end parallelRegion
  end subroutine

  subroutine kernel8(a, b, c, d)
    use secondary, only: my_external_array2
    implicit none
    real, dimension(NX, NY), intent(in) :: a, b
    real, dimension(NX, NY), intent(out) :: c, d
    real my_scalar

    my_scalar = 0.0d0
    @parallelRegion{domName(x,y), domSize(NX, NY)}
    c(x,y) = a(x,y) + b(x,y) + my_scalar
    @end parallelRegion

    my_scalar = 1.0d0
    @parallelRegion{domName(x,y), domSize(NX, NY)}
    d(x,y) = a(x,y) + b(x,y) + my_scalar
    @end parallelRegion
  end subroutine

  subroutine assert_values(test_array, expected_value)
    implicit none
    real, dimension(NX, NY), intent(in) :: test_array
    real(8), intent(in) :: expected_value
    integer :: fail_x, fail_y
    integer :: x, y
    logical test

    test = .TRUE.
    do y=1,NY
    do x=1,NX
      if (test .EQ. .TRUE. .AND. test_array(x,y) .NE. expected_value) then
      test = .FALSE.
      fail_x = x
      fail_y = y
      end if
    end do
    end do
    if (test .EQ. .TRUE.) then
      write(0,*) "test ok"
    else
      write(0,*) "test failed"
      write(0,*) "fails at", fail_x, fail_y, "test_array:", test_array(fail_x,fail_y)
      stop 2
    end if
  end subroutine
end module

program main
  use demo
  use secondary
  implicit none
  real, dimension(NX, NY) :: a, b, c, d

  a(:,:) = 1.0d0
  b(:,:) = 2.0d0
  c(:,:) = 0.0d0
  call kernel1(a, b, c)
  call assert_values(c, 3.0d0)

  c(:,:) = 0.0d0
  call kernel2(a, b, c)
  call assert_values(c, 5.0d0)

  c(:,:) = 0.0d0
  call kernel3(a, b, c)
  call assert_values(c, 5.0d0)

  call scalar_host_routine()

  c(:,:) = 0.0d0
  call kernel4(a, b, c)
  call assert_values(c, 6.0d0)

  my_external_param2 = 3.0d0
  c(:,:) = 0.0d0
  call kernel5(a, b, c)
  call assert_values(c, 6.0d0)

  my_external_array(1) = 0.0d0
  my_external_array(2) = 1.0d0
  c(:,:) = 0.0d0
  call kernel6(a, b, c)
  call assert_values(c, 4.0d0)

  allocate(my_external_array2(2))
  my_external_array2(1) = 0.0d0
  my_external_array2(2) = 1.0d0
  c(:,:) = 0.0d0
  call kernel7(a, b, c)
  call assert_values(c, 4.0d0)

  c(:,:) = 0.0d0
  d(:,:) = 0.0d0
  call kernel8(a, b, c, d)
  call assert_values(c, 3.0d0)
  call assert_values(d, 4.0d0)

  stop
end program main