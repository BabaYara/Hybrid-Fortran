! Copyright (C) 2014 Michel MÃ¼ller, Tokyo Institute of Technology

! This file is part of Hybrid Fortran.

! Hybrid Fortran is free software: you can redistribute it and/or modify
! it under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.

! Hybrid Fortran is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
! GNU Lesser General Public License for more details.

! You should have received a copy of the GNU Lesser General Public License
! along with Hybrid Fortran. If not, see <http://www.gnu.org/licenses/>.

module example
contains

  subroutine data_region(a, b, c, d, sum_c, sum_d)
  implicit none
  real, dimension(NX, NY, NZ), intent(in) :: a, b
  real, dimension(NX, NY, NZ), intent(out) :: c, d
  real, intent(out) :: sum_c, sum_d

  @domainDependant{attribute(autoDom,transferHere)}
  a, b, c, d
  @end domainDependant

  call run(a, b, c, d)
  call reduce_to_sum(c, sum_c)
  call reduce_to_sum(d, sum_d)

  end subroutine

  subroutine run(a, b, c, d)
    implicit none
    real, dimension(NX, NY, NZ), intent(in) :: a, b
    real, dimension(NX, NY, NZ), intent(out) :: c, d

    @domainDependant{attribute(autoDom,present)}
    a, b, c, d
    @end domainDependant

    @parallelRegion{appliesTo(CPU), domName(x,y), domSize(NX, NY)}
    call add(a, b, c)
    call mult(a, b, d)
    @end parallelRegion

  end subroutine

  subroutine add(a, b, c)
    implicit none
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NZ), intent(out) :: c
    integer :: z

    @domainDependant{attribute(autoDom), domName(x,y), domSize(NX,NY)}
    a, b, c
    @end domainDependant

    @parallelRegion{appliesTo(GPU), domName(x,y), domSize(NX, NY)}
    do z=1,NZ
      c(z) = a(z) + b(z)
    end do
    @end parallelRegion
  end subroutine

  subroutine mult(a, b, d)
    implicit none
    real, dimension(NZ), intent(in) :: a, b
    real, dimension(NZ), intent(out) :: d
    integer :: z

    @domainDependant{attribute(autoDom), domName(x,y), domSize(NX,NY)}
    a, b, d
    @end domainDependant

    @parallelRegion{appliesTo(GPU), domName(x,y), domSize(NX, NY)}
    do z=1,NZ
      d(z) = a(z) * b(z)
    end do
    @end parallelRegion
  end subroutine

  subroutine reduce_to_sum(a, result)
    implicit none
    real, dimension(NZ), intent(in) :: a
    real, intent(out) :: result
    integer :: z

    @domainDependant{attribute(autoDom), domName(x,y), domSize(NX,NY)}
    a
    @end domainDependant

    result = 0.0d0

    @parallelRegion{domName(x,y), domSize(NX, NY), reduction(+:result)}
    do z=1,NZ
      result = result + a(z)
    end do
    @end parallelRegion
  end subroutine

end module example

program main
  use example
  implicit none
  real, dimension(DOM(NX, NY, NZ)) :: a, b, c, d
  real :: sum_c, sum_d, expected_sum
  integer :: x, y, z
  integer :: fail_x, fail_y, fail_z
  logical test

  a(:,:,:) = 1.0d0
  b(:,:,:) = 2.0d0
  c(:,:,:) = 0.0d0
  d(:,:,:) = 0.0d0
  test = .TRUE.

  call data_region(a, b, c, d, sum_c, sum_d)
  write(6,*) "calculation complete"

  expected_sum = 3.0d0 * NX * NY * NZ
  if ( abs(sum_c - expected_sum) > 1E-5 ) then
    write(6,*) "sum c failed: ", sum_c, "; expected: ", expected_sum
    stop 2
  end if

  expected_sum = 2.0d0 * NX * NY * NZ
  if ( abs(sum_d - expected_sum) > 1E-5 ) then
    write(6,*) "sum d failed: ", sum_d, "; expected: ", expected_sum
    stop 2
  end if

  do y=1,NY
  do x=1,NX
  do z=1,NZ
    if (test .EQ. .TRUE. .AND. c(AT(x,y,z)) /= 3.0d0) then
      test = .FALSE.
      fail_x = x
      fail_y = y
      fail_z = z
    end if
    if (test .EQ. .TRUE. .AND. d(AT(x,y,z)) /= 2.0d0) then
      test = .FALSE.
      fail_x = x
      fail_y = y
      fail_z = z
    end if
  end do
  end do
  end do
  if (test .EQ. .TRUE.) then
    write(6,*) "test ok"
  else
    write(6,*) "test failed"
    write(6,*) "fails at", fail_x, fail_y, fail_z, "C:", c(AT(fail_x,fail_y,fail_z)), "D:", d(AT(fail_x,fail_y,fail_z))
    stop 2
  end if

  stop
end program main