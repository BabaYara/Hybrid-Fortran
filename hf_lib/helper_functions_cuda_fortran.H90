! Copyright (C) 2016 Michel MÃ¼ller, Tokyo Institute of Technology

! This file is part of Hybrid Fortran.

! Hybrid Fortran is free software: you can redistribute it and/or modify
! it under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.

! Hybrid Fortran is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
! GNU Lesser General Public License for more details.

! You should have received a copy of the GNU Lesser General Public License
! along with Hybrid Fortran. If not, see <http://www.gnu.org/licenses/>.

module helper_functions_cuda_fortran
implicit none

private

public :: getSlice2D_int_cf
public :: getSlice2D_cf
public :: getSlice3D_cf
public :: storeSlice2D_cf
public :: storeSlice3D_cf

contains

#ifdef GPU
#define INTENT_SLICED_OUT , intent(out)
#define INTENT_SLICED_IN , intent(in)
#else
#define INTENT_SLICED_OUT
#define INTENT_SLICED_IN
#endif

	@scheme{name(CUDA_FORTRAN)}
	subroutine getSlice2D_int_cf(sliced, original, nx, ny, nx_original, ny_original, offset_x, offset_y)
		implicit none
		integer(4), intent(in) :: nx, ny, nx_original, ny_original, offset_x, offset_y
		integer(4), intent(in) :: original
		integer(4) INTENT_SLICED_OUT :: sliced

		@domainDependant{}
		nx, ny, nx_original, ny_original, offset_x, offset_y
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y), domSize(nx_original, ny_original)}
		original
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y), domSize(nx, ny)}
		sliced
		@end domainDependant

		@if {architecture(GPU)}
		call getSlice2D_kernel_int_cf(sliced, original, nx, ny, nx_original, ny_original, offset_x, offset_y)
		@end if

	end subroutine

	subroutine getSlice2D_kernel_int_cf(sliced, original, nx, ny, nx_original, ny_original, offset_x, offset_y)
		implicit none
		integer(4), intent(in) :: nx, ny, nx_original, ny_original, offset_x, offset_y
		integer(4), intent(in) :: original
		integer(4) INTENT_SLICED_OUT :: sliced
		integer(4) :: x, y

		@domainDependant{}
		nx, ny, nx_original, ny_original, offset_x, offset_y
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y), domSize(nx_original, ny_original)}
		original
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y), domSize(nx, ny)}
		sliced
		@end domainDependant

		@parallelRegion{appliesTo(GPU), domName(x,y), domSize(nx, ny)}
		@if {parallelRegion(within)}
		sliced(x,y) = original(x + offset_x, y + offset_y)
		@end if
		@end parallelRegion
	end subroutine

	subroutine getSlice2D_cf(sliced, original, nx, ny, nx_original, ny_original, offset_x, offset_y)
		implicit none
		integer(4), intent(in) :: nx, ny, nx_original, ny_original, offset_x, offset_y
		real(8), intent(in) :: original
		real(8) INTENT_SLICED_OUT :: sliced

		@domainDependant{}
		nx, ny, nx_original, ny_original, offset_x, offset_y
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y), domSize(nx_original, ny_original)}
		original
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y), domSize(nx, ny)}
		sliced
		@end domainDependant

		@if {architecture(GPU)}
		call getSlice2D_kernel_cf(sliced, original, nx, ny, nx_original, ny_original, offset_x, offset_y)
		@end if

	end subroutine

	subroutine getSlice2D_kernel_cf(sliced, original, nx, ny, nx_original, ny_original, offset_x, offset_y)
		implicit none
		integer(4), intent(in) :: nx, ny, nx_original, ny_original, offset_x, offset_y
		real(8), intent(in) :: original
		real(8) INTENT_SLICED_OUT :: sliced
		integer(4) :: x, y

		@domainDependant{}
		nx, ny, nx_original, ny_original, offset_x, offset_y
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y), domSize(nx_original, ny_original)}
		original
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y), domSize(nx, ny)}
		sliced
		@end domainDependant

		@parallelRegion{appliesTo(GPU), domName(x,y), domSize(nx, ny)}
		@if {parallelRegion(within)}
		sliced(x,y) = original(x + offset_x, y + offset_y)
		@end if
		@end parallelRegion
	end subroutine

	subroutine getSlice3D_cf(sliced, original, nx, ny, nz, nx_original, ny_original, nz_original, offset_x, offset_y, offset_z)
		implicit none
		integer(4), intent(in) :: nx, ny, nz, nx_original, ny_original, nz_original, offset_x, offset_y, offset_z
		real(8), intent(in) :: original(nz_original)
		real(8) INTENT_SLICED_OUT :: sliced(nz)

		@domainDependant{}
		nx, ny, nz, nx_original, ny_original, nz_original, offset_x, offset_y, offset_z
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y,k), domSize(nx_original, ny_original, nz_original)}
		original
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y,k), domSize(nx, ny, nz)}
		sliced
		@end domainDependant

		@if {architecture(GPU)}
		call getSlice3D_kernel_cf(sliced, original, nx, ny, nz, nx_original, ny_original, nz_original, offset_x, offset_y, offset_z)
		@end if

	end subroutine

	subroutine getSlice3D_kernel_cf(sliced, original, nx, ny, nz, nx_original, ny_original, nz_original, offset_x, offset_y, offset_z)
		implicit none
		integer(4), intent(in) :: nx, ny, nz, nx_original, ny_original, nz_original, offset_x, offset_y, offset_z
		real(8), intent(in) :: original(nz_original)
		real(8) INTENT_SLICED_OUT :: sliced(nz)
		integer(4) :: z
		integer(4) :: x, y

		@domainDependant{}
		nx, ny, nz, nx_original, ny_original, nz_original, offset_x, offset_y, offset_z
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y,k), domSize(nx_original, ny_original, nz_original)}
		original
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y,k), domSize(nx, ny, nz)}
		sliced
		@end domainDependant

		@parallelRegion{appliesTo(GPU), domName(x,y), domSize(nx, ny)}
		@if {parallelRegion(within)}
		do z = 1, nz
			sliced(x,y,z) = original(x + offset_x, y + offset_y, z + offset_z)
		end do
		@end if
		@end parallelRegion
	end subroutine

	subroutine storeSlice2D_cf(original, sliced, nx_original, ny_original, nx, ny, offset_x, offset_y)
		implicit none
		integer(4), intent(in) :: nx, ny, nx_original, ny_original, offset_x, offset_y
		real(8) INTENT_SLICED_OUT :: original
		real(8) INTENT_SLICED_IN :: sliced

		@domainDependant{}
		nx, ny, nx_original, ny_original, offset_x, offset_y
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y), domSize(nx_original, ny_original)}
		original
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y), domSize(nx, ny)}
		sliced
		@end domainDependant

		@if {architecture(GPU)}
		call storeSlice2D_kernel_cf(original, sliced, nx_original, ny_original, nx, ny, offset_x, offset_y)
		@end if

	end subroutine

	subroutine storeSlice2D_kernel_cf(original, sliced, nx_original, ny_original, nx, ny, offset_x, offset_y)
		implicit none
		integer(4), intent(in) :: nx, ny, nx_original, ny_original, offset_x, offset_y
		real(8) INTENT_SLICED_OUT :: original
		real(8) INTENT_SLICED_IN :: sliced
		integer(4) :: x, y

		@domainDependant{}
		nx, ny, nx_original, ny_original, offset_x, offset_y
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y), domSize(nx_original, ny_original)}
		original
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y), domSize(nx, ny)}
		sliced
		@end domainDependant

		@parallelRegion{appliesTo(GPU), domName(x,y), domSize(nx, ny)}
		@if {parallelRegion(within)}
		original(x + offset_x, y + offset_y) = sliced(x,y)
		@end if
		@end parallelRegion
	end subroutine

	subroutine storeSlice3D_cf(original, sliced, nx_original, ny_original, nz_original, nx, ny, nz, offset_x, offset_y, offset_z)
		implicit none
		integer(4), intent(in) :: nx_original, ny_original, nz_original, nx, ny, nz, offset_x, offset_y, offset_z
		real(8) INTENT_SLICED_OUT :: original(nz_original)
		real(8) INTENT_SLICED_IN :: sliced(nz)

		@domainDependant{}
		nx, ny, nz, nx_original, ny_original, nz_original, offset_x, offset_y, offset_z
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y,k), domSize(nx_original, ny_original, nz_original)}
		original
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y,k), domSize(nx, ny, nz)}
		sliced
		@end domainDependant

		@if {architecture(GPU)}
		call storeSlice3D_kernel_cf(original, sliced, nx_original, ny_original, nz_original, nx, ny, nz, offset_x, offset_y, offset_z)
		@end if
	end subroutine

	subroutine storeSlice3D_kernel_cf(original, sliced, nx_original, ny_original, nz_original, nx, ny, nz, offset_x, offset_y, offset_z)
		implicit none
		integer(4), intent(in) :: nx_original, ny_original, nz_original, nx, ny, nz, offset_x, offset_y, offset_z
		real(8) INTENT_SLICED_OUT :: original(nz_original)
		real(8) INTENT_SLICED_IN :: sliced(nz)
		integer(4) :: z
		integer(4) :: x, y

		@domainDependant{}
		nx, ny, nz, nx_original, ny_original, nz_original, offset_x, offset_y, offset_z
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y,k), domSize(nx_original, ny_original, nz_original)}
		original
		@end domainDependant

		@domainDependant{attribute(present,autoDom), domName(x,y,k), domSize(nx, ny, nz)}
		sliced
		@end domainDependant

		@parallelRegion{appliesTo(GPU), domName(x,y), domSize(nx, ny)}
		@if {parallelRegion(within)}
		do z = 1, nz
			original(x + offset_x, y + offset_y, z + offset_z) = sliced(x,y,z)
		end do
		@end if
		@end parallelRegion
	end subroutine
	@end scheme
end module